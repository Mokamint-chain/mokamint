<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>io-mokamint-docker</artifactId>
  <packaging>jar</packaging>
  <name>io-mokamint-docker</name>
  <version>${mokamint.version}</version>
  <description>This module creates the Docker images for managing Mokamint nodes.</description>

  <parent>
    <groupId>io.mokamint</groupId>
    <artifactId>mokamint</artifactId>
    <version>parent</version>
  </parent>

  <dependencies>

    <!-- we make mokamint-plotter available in the container -->
    <dependency>
      <groupId>io.mokamint</groupId>
      <artifactId>io-mokamint-plotter-cli</artifactId>
      <version>${mokamint.version}</version>
    </dependency>

    <!-- we make mokamint-node available in the container -->
    <dependency>
      <groupId>io.mokamint</groupId>
      <artifactId>io-mokamint-node-cli</artifactId>
      <version>${mokamint.version}</version>
    </dependency>

    <!-- we make mokamint-miner available in the container -->
    <dependency>
      <groupId>io.mokamint</groupId>
      <artifactId>io-mokamint-miner-cli</artifactId>
      <version>${mokamint.version}</version>
    </dependency>

    <!-- we make mokamint-application available in the container -->
    <dependency>
      <groupId>io.mokamint</groupId>
      <artifactId>io-mokamint-application-cli</artifactId>
      <version>${mokamint.version}</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.2.0</version>
	    <configuration>
	      <failOnError>false</failOnError>
	      <filesets>
	        <fileset>
	          <directory>modules</directory>
	          <includes>
	            <include>**/*</include>
	          </includes>
	          <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
	    </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
	  <!-- useless to install this module in the local Maven repository -->
	  <plugin>
        <artifactId>maven-install-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <skip>true</skip>
        </configuration>
	  </plugin>
      <!-- no reason to javadoc this module -->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <!-- attempt to use 3.5.0 runs into a compilation error in Eclipse -->
        <version>3.3.0</version>
        <configuration>
		  <includeScope>
		    runtime <!-- so that test or provided dependencies are not considered -->
		  </includeScope>
		</configuration>
        <executions>
          <execution>
            <id>copy-unnamed-modules</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>./modules/unnamed</outputDirectory>
              <includeArtifactIds>
                annotations,
                commons-compress,
                kotlin-loggin,
                kotlin-stdlib,
                kotlin-stdlib-common,
                slf4j-api,
                slf4j-nop,
                xodus-compress,
                xodus-environment,
                xodus-openAPI,
                xodus-utils
			  </includeArtifactIds>
            </configuration>
          </execution>
          <execution>
            <id>copy-explicit-or-automatic-modules</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>./modules/explicit_or_automatic</outputDirectory>
              <excludeArtifactIds>
                <!-- we exclude all unnamed modules -->
                annotations,
                commons-compress,
                kotlin-loggin,
                kotlin-stdlib,
                kotlin-stdlib-common,
                slf4j-api,
                slf4j-nop,
                xodus-compress,
                xodus-environment,
                xodus-openAPI,
                xodus-utils
              </excludeArtifactIds>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
		<groupId>io.fabric8</groupId>
  		<artifactId>docker-maven-plugin</artifactId>
  		<version>0.46.0</version>
	    <configuration>
		  <images>
		    <image>
		      <name>mokamint/mokamint:${mokamint.version}</name>
		      <build>
		        <contextDir>../../..</contextDir>
		        <dockerFile>src/main/docker/mokamint</dockerFile>
		        <buildx>
                  <platforms>
	                <platform>linux/amd64</platform>
	              </platforms>
                </buildx>
		      </build>
			</image>
			<image>
		      <name>mokamint/mokamint-arm64:${mokamint.version}</name>
		      <build>
		        <contextDir>../../..</contextDir>
		        <dockerFile>src/main/docker/mokamint-arm64</dockerFile>
                <buildx>
                  <platforms>
	                <platform>linux/arm64</platform>
	              </platforms>
                </buildx>
		      </build>
			</image>
		  </images>
  		</configuration>
  		<!-- Adding this part makes docker:build execute during Maven's package phase -->
        <executions>
          <execution>
            <id>docker:build</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
	  </plugin>
    </plugins>
  </build>

  <profiles>
	<profile>
	  <id>release</id>
      <build>
        <plugins>
		  <plugin>
            <artifactId>maven-gpg-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
	    </plugins>
      </build>
	</profile>
  </profiles>

</project>